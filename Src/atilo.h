/**
 * @file atilo.h
 *
 * Atilo: Othello/Reversi Game \n
 * Copyright (C) 1999-2007  Olivier Singla \n
 * http://atilo.sourceforge.net/ \n
 */

#ifndef ATILO_H_
#  define ATILO_H_

#  ifdef __MAIN__
#    	define COMMON
#  else
#    	define COMMON extern
#  endif

#  define VERSION	0x010000

/*
	Used to display debug messages, only if compiled with debug options
*/
#  if defined(PRINT_TRACE)
#    	define TRACE(fmt, args...)	printf( fmt, ## args )
#  else
#    	define TRACE(fmt, args...)
#  endif

/*
	GNU functions/variables attributes
*/
#  ifdef __GNUC__
#    	define VAR_UNUSED 	__attribute__ ( (unused) )
#    	define NO_RETURN 	__attribute__ ( (noreturn) )
#    	define PRINTF		__attribute__ ( (format(printf, 1, 2)) )
#  else
#    	define VAR_UNUSED
#    	define NO_RETURN
#    	define PRINTF
#  endif

/* ---  Generate a pseudo-random number between [a..b] --- */
#  define RANDOM( a, b ) \
	a + (rand() % (b - a + 1))

/*--- Board pawns codes ---*/
#  define	CODE_AROUND			-1
#  define	CODE_EMPTY			0
#  define	CODE_BLACK			1
#  define	CODE_WHITE			2

/*--- Convert a board coordonnate into a linar position ---*/
#  define XY( x, y )	((x)*10+(y))

/*--- Show a move name in a form A1-H8 ---*/
#  define SHOW_COORD_Y( p )	((((UINT)p - (UINT)board) % 10) + '@')

/*--- Board position and size ---*/
#  define BOARD_HEIGHT_FENCE 10
#  define BOARD_WIDTH_FENCE 10
#  define CELL_HEIGHT_FENCE 5
#  define CELL_WIDTH_FENCE 5
#  define BOARD_RC( r, c ) \
	BOARD_C0 + BOARDCELL_W*(c-1), \
	BOARD_R0 + BOARDCELL_H*(r-1)
#  define PAWN_RC( r, c ) \
	BOARD_C0 + (BOARDCELL_W - PAWN_W)/2 + BOARDCELL_W*(c-1), \
	BOARD_R0 + (BOARDCELL_H - PAWN_H)/2 + BOARDCELL_H*(r-1)

/*--- ---*/
typedef unsigned char *CELL;
typedef CELL *PCELL;

/*--- Position to play ---*/
typedef struct {
    int x, y;                   // Position to play, set to (-1, -1) if pass
    int coef_best;              // Best coef. 
    long cnt;                   // Nb of positions examined
    int max_level;              // Max level reached
    time_t elapsed;             // Time set for calculation
} WHERE_TO_PLAY;

/*--- Used to sort scores into the minimax function ---*/
typedef struct {
    int score;
    int index;
} SCORE_TO_SORT;

/*--- Config file ---*/
enum { LEVEL1 = 1, LEVEL2, LEVEL3, LEVEL4, LEVEL5, MAX_LEVELS };
enum { STRATEGY1 = 1, STRATEGY2, STRATEGY3, STRATEGY4, STRATEGY5, STRATEGY6, MAX_STRATEGIES };
typedef struct {
    int32_t level;
    int32_t strategy;
    int32_t mainwnd_w, mainwnd_h;
} CONFIG;
COMMON CONFIG config;

/*--- The game ---*/
COMMON unsigned char code_computer; // Either CODE_BLACK or CODE_WHITE
COMMON unsigned char code_human;    // Either CODE_BLACK or CODE_WHITE
COMMON unsigned char color_to_play; // Next color to play
COMMON unsigned char board[( 8 + 2 ) * ( 8 + 2 )];
COMMON int nb_pawns[3];         // CODE_BLACK+1 = 3
COMMON CELL cancel_last_human_move[40]; // To cancel the last human move
COMMON int ctime_black, ctime_white;    // Cumul time played by each color
COMMON time_t t_start;          // Time when player starts thinking

/*--- List (stack) of possibilities *and* enclosed pawns ---*/
COMMON CELL possib[8192];

COMMON GtkWidget *main_wnd;
COMMON GtkWidget *main_hbox;
COMMON GtkWidget *status_hbox;
COMMON GtkWidget *board_drawing_area;

COMMON GdkGC *penWhiteCell;
COMMON GdkGC *penBlackCell;

/*--- If this variable is TRUE, show the possibilities of the user ---*/

/*--- Meaning:	0 means no show, else the color to show ---*/
COMMON int which_show_poss;
COMMON char state_selectable[8][8];

/* --- History list --- */
COMMON GtkWidget *hist_list;

/* --- Used by minimax --- */
COMMON int max_depth;
COMMON int cnt;
COMMON int chosen_move;

COMMON int board_width, board_height;
COMMON int board_xstart, board_ystart;
COMMON int cell_width, cell_height;

COMMON guint select_hist_handler_id;

/*
	INLINE prototypes functions are not generated by cproto...
*/
inline int _ponderation1( const int the_player, const int the_enemy );
inline int _ponderation2( const int the_player, const int the_enemy );
inline int _ponderation3( const int the_player, const int the_enemy );
inline int _ponderation4( const int the_player, const int the_enemy );

inline char *lib_colors( const int n );
inline int do_build_possib( PCELL * ptr, const int cplayer, const int cenemy );
inline int do_nb_possib( const int cplayer, const int cenemy );

/* atilo.c */
gint main_wnd_resized( GtkWidget * widget, GdkEventConfigure * event );
void clear_hist_list( void );
gint main_wnd_expose( GtkWidget * widget, GdkEventExpose * event );
void create_hist_list( void );
void init_new_game( const int f_draw, const int f_reset_history );
int main( int argc, char *argv[] );

#endif                         /*ATILO_H_ */
